// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/memcash.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/memcash.proto", fileDescriptor_b7957b7427784648) }

var fileDescriptor_b7957b7427784648 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x48, 0xd2, 0xcf,
	0x4d, 0xcd, 0x4d, 0x4e, 0x2c, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x44, 0x88,
	0xc4, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x16, 0x43, 0xa4, 0x8c, 0xca, 0xb9, 0xf8, 0x7c,
	0x21, 0x32, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x26, 0x5c, 0x02, 0xee, 0xa9, 0x25,
	0x2e, 0x89, 0x25, 0x89, 0x6e, 0x45, 0xf9, 0xb9, 0xce, 0x89, 0xc9, 0x19, 0xa9, 0x42, 0xfc, 0x7a,
	0x50, 0xa1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x5e, 0x3d, 0x08, 0xaf, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x55, 0x89, 0x41, 0x48, 0x9f, 0x8b, 0x3f, 0x38, 0xb1, 0x2c, 0x15, 0x24, 0x1a,
	0x92, 0x0f, 0xd3, 0x14, 0x8c, 0xaa, 0x89, 0x53, 0x0f, 0xa1, 0xc1, 0xc8, 0x95, 0x8b, 0xd7, 0x23,
	0x35, 0x31, 0xa7, 0x04, 0xc9, 0x5e, 0x56, 0xe7, 0x8c, 0xd4, 0xe4, 0x6c, 0x21, 0x61, 0x3d, 0x88,
	0x04, 0x98, 0x07, 0xd3, 0x2b, 0x82, 0x2a, 0x08, 0x33, 0xc6, 0x89, 0x3b, 0x8a, 0x33, 0xb1, 0xa0,
	0x40, 0xbf, 0x20, 0x49, 0xbf, 0xcc, 0x30, 0x89, 0x0d, 0xec, 0x27, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x99, 0x22, 0x49, 0x0c, 0x02, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MemcashServiceClient is the client API for MemcashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemcashServiceClient interface {
	GetDataFromCache(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	SaveDataToCache(ctx context.Context, in *SetDataRequest, opts ...grpc.CallOption) (*Response, error)
}

type memcashServiceClient struct {
	cc *grpc.ClientConn
}

func NewMemcashServiceClient(cc *grpc.ClientConn) MemcashServiceClient {
	return &memcashServiceClient{cc}
}

func (c *memcashServiceClient) GetDataFromCache(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, "/MemcashService/GetDataFromCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memcashServiceClient) SaveDataToCache(ctx context.Context, in *SetDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/MemcashService/SaveDataToCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemcashServiceServer is the server API for MemcashService service.
type MemcashServiceServer interface {
	GetDataFromCache(context.Context, *GetDataRequest) (*DataResponse, error)
	SaveDataToCache(context.Context, *SetDataRequest) (*Response, error)
}

// UnimplementedMemcashServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMemcashServiceServer struct {
}

func (*UnimplementedMemcashServiceServer) GetDataFromCache(ctx context.Context, req *GetDataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataFromCache not implemented")
}
func (*UnimplementedMemcashServiceServer) SaveDataToCache(ctx context.Context, req *SetDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDataToCache not implemented")
}

func RegisterMemcashServiceServer(s *grpc.Server, srv MemcashServiceServer) {
	s.RegisterService(&_MemcashService_serviceDesc, srv)
}

func _MemcashService_GetDataFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemcashServiceServer).GetDataFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemcashService/GetDataFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemcashServiceServer).GetDataFromCache(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemcashService_SaveDataToCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemcashServiceServer).SaveDataToCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemcashService/SaveDataToCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemcashServiceServer).SaveDataToCache(ctx, req.(*SetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MemcashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MemcashService",
	HandlerType: (*MemcashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataFromCache",
			Handler:    _MemcashService_GetDataFromCache_Handler,
		},
		{
			MethodName: "SaveDataToCache",
			Handler:    _MemcashService_SaveDataToCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/memcash.proto",
}

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthServiceClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthServiceClient struct {
	cc *grpc.ClientConn
}

func NewHealthServiceClient(cc *grpc.ClientConn) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/HealthService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
type HealthServiceServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

// UnimplementedHealthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (*UnimplementedHealthServiceServer) Check(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

func RegisterHealthServiceServer(s *grpc.Server, srv HealthServiceServer) {
	s.RegisterService(&_HealthService_serviceDesc, srv)
}

func _HealthService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HealthService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/memcash.proto",
}
